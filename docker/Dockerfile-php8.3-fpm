# Multi-stage Dockerfile for PHP 8.3 FPM tailored for Drupal
# - builder: installs Composer and runs `composer install` to produce /build/vendor
# - runtime: installs runtime PHP extensions and copies vendor from builder

###############################################################################
# Builder stage: install composer and build PHP dependencies
###############################################################################
FROM php:8.3-fpm AS builder

LABEL maintainer="Cocoa-County <dev@cocoacounty.local>"

# Install packages required to run composer and fetch PHP packages
RUN set -eux \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        ca-certificates \
        git \
        unzip \
        zip \
        curl \
        # development packages used to compile PHP extensions in the builder
        libzip-dev \
        zlib1g-dev \
        libicu-dev \
        libxml2-dev \
        libpng-dev \
        libjpeg-dev \
        libwebp-dev \
        libfreetype6-dev \
        libonig-dev \
        locales \
    && rm -rf /var/lib/apt/lists/*

# Install composer (copy from official image)
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /build

# Copy only composer files if present to leverage Docker cache and perform install
# Assumes your project's composer.json + composer.lock are in ./web
COPY web/composer.json web/composer.lock ./

RUN if [ -f composer.json ]; then \
        composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader --no-progress; \
    fi

# Configure and build PHP extensions in builder so runtime doesn't need -dev packages
RUN set -eux \
    && docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
    && docker-php-ext-install -j$(nproc) \
        pdo \
        pdo_mysql \
        mbstring \
        xml \
        zip \
        intl \
        gd \
        opcache

###############################################################################
# Runtime stage: runtime image with only runtime deps + vendor
###############################################################################
FROM php:8.3-fpm AS runtime

LABEL maintainer="Cocoa-County <dev@cocoacounty.local>"

# Install runtime packages and PHP extensions required by Drupal
RUN set -eux \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        ca-certificates \
        zip \
        unzip \
        # runtime libraries (no -dev packages here)
        libxml2 \
        zlib1g \
        locales \
    && rm -rf /var/lib/apt/lists/*

# Copy compiled PHP extensions and config from builder so runtime doesn't need -dev packages
COPY --from=builder /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/
COPY --from=builder /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/

# Copy composer binary from the official composer image (useful if you want to run
# composer in the runtime image, e.g., to install drush globally). This is optional.
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Copy built vendor dir from builder (if present). This copies the dependencies
# that were installed in the builder stage into the runtime image.
COPY --from=builder /build/vendor /var/www/html/vendor

# Set working directory to the Drupal web root
WORKDIR /var/www/html

# PHP runtime configuration tweaks for Drupal
RUN { \
    echo "memory_limit=512M"; \
    echo "upload_max_filesize=100M"; \
    echo "post_max_size=110M"; \
    echo "max_execution_time=300"; \
    echo "opcache.enable=1"; \
    echo "opcache.memory_consumption=128"; \
    echo "opcache.interned_strings_buffer=8"; \
    echo "opcache.max_accelerated_files=4000"; \
    echo "date.timezone=UTC"; \
} > /usr/local/etc/php/conf.d/drupal-recommended.ini

# Ensure www-data owns the project files and expose FPM port
RUN chown -R www-data:www-data /var/www/html

EXPOSE 9000

# Default command
CMD ["php-fpm"]
